#Include 'tlpp-core.th'

Namespace TotvsDevelopers.Demo.Services

Class ProductService From FWAdapterBaseV2
  Private Data _cQuery As Character

	Public Method New()
	Public Method BuildPage( nCurrentPage As Numeric, nPageSize As Numeric )
  Public Method FindById( cId As Character )
  Public Method SaveOrUpdate( jData, cId )
  Public Method Remove()

  Private Method _ConfigJsonResultSet()
EndClass

Method New() CLASS ProductService
	_Super:New( 'GET', .T. )

  Self:_ConfigJsonResultSet()
return

Method BuildPage( nCurrentPage As Numeric, nPageSize As Numeric ) Class ProductService
  Default nCurrentPage := 1
  Default nPageSize := 10

  Self:SetPage( nCurrentPage )
  Self:SetPageSize( nPageSize )
	Self:SetQuery( Self:_cQuery )
	Self:SetWhere( "B1_FILIAL = '"+ FWxFilial('SB1') +"' AND SB1.D_E_L_E_T_ = ' '" )
	Self:SetOrder( "B1_COD" )

	If ( Self:Execute() )
		Self:FillGetResponse()
	EndIf
Return

Method FindById( cId As Character ) Class ProductService
  Local aArea    := FWGetArea()
  Local aAreaSB1 := SB1->( FWGetArea() )
  Local aAreaSBM := SBM->( FWGetArea() )
  Local jResult  := JsonObject():New()

  jResult['result'] := JsonObject():New()

  DbSelectArea("SB1")
  DbSetOrder( 1 )

  If ( MsSeek( FWXFilial("SB1")+cId ) )
    jResult['success'] := .T.
    jResult['result']["id"] := AllTrim( SB1->B1_COD )
    jResult['result']["description"] := AllTrim( SB1->B1_DESC )
    jResult['result']["group"] := AllTrim( SB1->B1_GRUPO )
    jResult['result']["groupDescription"] := AllTrim( Posicione("SBM", 1, FWXFilial("SBM")+SB1->B1_COD, "BM_DESC") )
  Else
    jResult['success'] := .F.
    jResult['result']['code'] := 404
    jResult['result']['message'] := "Produto não encontrado"
    jResult['result']['detailedMessage'] := "O produto " + cId + " não foi encontrado"
  EndIf

  FWRestArea( aAreaSBM )
  FWRestArea( aAreaSB1 )
  FWRestArea( aArea )
Return jResult

Method SaveOrUpdate( jData, cId ) Class ProductService
  Local aArea    := FWGetArea()
  Local aAreaSB1 := SB1->( FWGetArea() )
  Local oModel   := FWLoadModel("MATA010")
  Local oSB1Mod  := oModel:GetModel("SB1MASTER")
  Local jResult  := JsonObject():New()

  Local aErro    As Array
  Local cMessage As Character

  jResult['result'] := JsonObject():New()

  Default cId := Nil

  oModel:SetOperation( If( Empty( cId ), 3, 4 ) )
  oModel:Activate()

  //Pegando o model e setando os campos
  oSB1Mod:SetValue( "B1_COD" ,   jData['id'] )
  oSB1Mod:SetValue( "B1_DESC",   jData['description'] )
  oSB1Mod:SetValue( "B1_TIPO",   jData['kind'] )
  oSB1Mod:SetValue( "B1_UM",     jData['um'] )
  oSB1Mod:SetValue( "B1_LOCPAD", jData['warehouse'] )

  If ( oModel:VldData() .And. oModel:CommitData())
    jResult['success'] := .T.
    jResult['result']['message'] := 'Produto salvo com sucesso'
  Else
    aErro := oModel:GetErrorMessage()

    cMessage := "Id do formulário de origem:"  + ' [' + cValToChar(aErro[01]) + '], '
    cMessage += "Id do campo de origem: "      + ' [' + cValToChar(aErro[02]) + '], '
    cMessage += "Id do formulário de erro: "   + ' [' + cValToChar(aErro[03]) + '], '
    cMessage += "Id do campo de erro: "        + ' [' + cValToChar(aErro[04]) + '], '
    cMessage += "Id do erro: "                 + ' [' + cValToChar(aErro[05]) + '], '
    cMessage += "Mensagem do erro: "           + ' [' + cValToChar(aErro[06]) + '], '
    cMessage += "Mensagem da solução: "        + ' [' + cValToChar(aErro[07]) + '], '
    cMessage += "Valor atribuído: "            + ' [' + cValToChar(aErro[08]) + '], '
    cMessage += "Valor anterior: "             + ' [' + cValToChar(aErro[09]) + ']'

    jResult['success'] := .F.
    jResult['result']['code'] := 400
    jResult['result']['message'] := "Erro ao salvar o produto"
    jResult['result']['detailedMessage'] := cMessage
  EndIf

  oModel:DeActivate()

  FWRestArea( aAreaSB1 )
  FWRestArea( aArea )
Return jResult

Method _ConfigJsonResultSet() Class ProductService
  Self:_cQuery := "SELECT #QueryFields# FROM " + RetSqlName( 'SB1' ) + " SB1 "
  Self:_cQuery += "LEFT JOIN " + RetSqlName( 'SBM' ) + " SBM "
	Self:_cQuery += "ON B1_GRUPO = BM_GRUPO "
	Self:_cQuery += "AND BM_FILIAL = '"+ FWxFilial( 'SBM' ) +"' "
	Self:_cQuery += "AND SBM.D_E_L_E_T_ = ' ' "
  Self:_cQuery += "WHERE #QueryWhere# "

  Self:AddMapFields( 'id'             , 'B1_COD'  , .T., .T., { 'B1_COD', 'C', TamSX3( 'B1_COD' )[1], 0 } )
	Self:AddMapFields( 'description'	    , 'B1_DESC' , .T., .F., { 'B1_DESC', 'C', TamSX3( 'B1_DESC' )[1], 0 } )
	Self:AddMapFields( 'group'		        , 'B1_GRUPO', .T., .F., { 'B1_GRUPO', 'C', TamSX3( 'B1_GRUPO' )[1], 0 } )
	Self:AddMapFields( 'groupDescription'	, 'BM_DESC' , .T., .F., { 'BM_DESC', 'C', TamSX3( 'BM_DESC' )[1], 0 } )
Return
